package com.asd {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.display.BlendMode;	import flash.geom.Vector3D;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import flash.filters.DropShadowFilter;	import flash.filters.BitmapFilterQuality;	import com.google.analytics.AnalyticsTracker;	import com.google.analytics.GATracker;	import com.omniture.testandtarget.FlashboxFactory;	import com.omniture.testandtarget.Flashbox;	import memorphic.xpath.XPathQuery;	import com.asd.PaidWhere;	import com.asd.PaidFocuses;	import com.asd.PaidResults;	import gs.*;	import gs.easing.*;	import gs.plugins.*;		public class PaidSelector extends Sprite {		public var splash:Sprite;		private var flashy:Loader;		public var btns:Sprite;		public var tf:TextFormat;		public var tfBtn:TextFormat;		public var tfBold:TextFormat;		public var ds:DropShadowFilter;		public var btnArr:Array;		public var orderArr:Array;		public var orderArrLen:uint;		public var currSection:int = 0;		private var isMoving:Boolean = false;				// the various non-splash widget panes		/*public var where:Where;		public var focus:Focuses;		public var theResults:Results*/				public var whereBool:Boolean = false;		public var focusBool:Boolean = false;		public var resultsBool:Boolean = false;				// variables to pass around		public var theState:String = "";		public var theProgram:String = "";		public var stateKeys:XMLList;						// bread crumb piece		public var bread:Sprite;		private var breadX:uint = 10;		private var jumpBackBool:Boolean = false;		private var backTo:String;		public var tracker:AnalyticsTracker;				// flashbox		private var mboxFactory:FlashboxFactory;		private var flashAd:Flashbox;				// xml		public var statesXML:XML = new XML( );		private var statesLoader:URLLoader = new URLLoader( );				public function PaidSelector( ) {			// activate TweenLite			TweenPlugin.activate([EndArrayPlugin, DropShadowFilterPlugin, VolumePlugin, TintPlugin, FramePlugin, AutoAlphaPlugin, RemoveTintPlugin, VisiblePlugin]);						// set up the tracking mechanism			tracker = new GATracker( this, "UA-653006-1", "AS3", false );						// setup the flashbox piece			setupFlashbox( );						// load up the states xml			//statesLoader.addEventListener( Event.COMPLETE, loadStatesXML );						//statesLoader.load( new URLRequest( "schoolKey2.xml" ) );						// add in the background			var bg:Loader = new Loader( );			bg.name = "splashBG";			//bg.contentLoaderInfo.addEventListener( Event.COMPLETE, fadeInFadeOut );			bg.cacheAsBitmap = true;			//bg.alpha = 0;			bg.blendMode = BlendMode.LAYER;			bg.load( new URLRequest( "images/flashBG.jpg" ) );						addChild( bg );						// set up the splash screen and load in the buttons as well as the image			splash = new Sprite( );			splash.name = "splash";			splash.mouseEnabled = false;						addChild( splash );						var topSchools:Loader = new Loader( );			topSchools.y = 420;			topSchools.contentLoaderInfo.addEventListener( Event.COMPLETE, fadeIn );			topSchools.load( new URLRequest( "images/topSchools.jpg" ) );						splash.addChild( topSchools );						flashy = new Loader( );			flashy.x = 397;			flashy.contentLoaderInfo.addEventListener( Event.COMPLETE, fadeIn );			flashy.load( new URLRequest( "images/nurse.jpg" ) );						splash.addChild( flashy );			flashy.cacheAsBitmap = true;						var nurseMask:Loader = new Loader( );			nurseMask.x = 53;			nurseMask.contentLoaderInfo.addEventListener( Event.COMPLETE, masksOn );			nurseMask.load( new URLRequest( "images/nurseMask.png" ) );						splash.addChild( nurseMask );			nurseMask.cacheAsBitmap = true;						// text formatters			tf = new TextFormat( );			tf.font = "Helvetica";			tf.color = "0xdae7e3";			tf.bold = true;			tf.size = 32;						tfBtn = new TextFormat( );			tfBtn.font = "Helvetica";			tfBtn.color = "0x174c5f";			tfBtn.align = "center";			tfBtn.bold = true;			tfBtn.size = 14;						tfBold = new TextFormat( );			tfBold.font = "Helvetica";			tfBold.color = "0x003366";			tfBold.size = 22;			tfBold.bold = true;						// dropshadow			ds = new DropShadowFilter( 5, 90, 0x000000, .27, 8, 8, 3, BitmapFilterQuality.HIGH );						// headline			var headline:TextField = new TextField( );			headline.width = 500;			headline.x = 20;			headline.y = 75;			headline.wordWrap = false;			headline.multiline = false;			headline.selectable = false;			headline.htmlText = "Find your school match by:";			headline.antiAliasType = AntiAliasType.ADVANCED;			headline.filters = [ ds ];			headline.embedFonts = true;			headline.setTextFormat( tf );						splash.addChild( headline );						TweenLite.from( headline, .5, { alpha:0, delay:.75 } );						// buttons			btns = new Sprite( );			btns.y = 140;			btns.blendMode = BlendMode.LAYER;						splash.addChild( btns );						var xPosBtn:uint = 30;						btnArr = new Array( "Program", "State" );			for ( var i in btnArr ) {				var sp:Sprite = new Sprite( );				sp.name = i;				sp.x = xPosBtn;				sp.graphics.beginFill( 0x000000, 0 );				sp.graphics.drawRect( 0, 0, 255, 255 );				sp.graphics.endFill( );				sp.buttonMode = true;				sp.mouseChildren = false;				sp.blendMode = BlendMode.LAYER;								sp.addEventListener( MouseEvent.ROLL_OVER, over, false, 100, true );				sp.addEventListener( MouseEvent.ROLL_OUT, out, false, 100, true );				sp.addEventListener( MouseEvent.CLICK, clicked, false, 100, true );								btns.addChild( sp );								var imgNormal:Loader = new Loader( );				imgNormal.blendMode = BlendMode.LAYER;				imgNormal.load( new URLRequest( "images/" + btnArr[ i ].toLowerCase( ) + "NormalBtn.png" ) );				imgNormal.cacheAsBitmap = true;								sp.addChild( imgNormal );								var imgMult:Loader = new Loader( );				imgMult.blendMode = BlendMode.MULTIPLY;				imgMult.load( new URLRequest( "images/" + btnArr[ i ].toLowerCase( ) + "GraphicBtn.png" ) );				imgMult.cacheAsBitmap = true;								sp.addChild( imgMult );								TweenLite.from( sp, .5, { alpha:0, scaleX:.95, scaleY:.95, x:"5", y:"5", delay:.75 + .25*i } );								xPosBtn += 220;			}						var breadMask:Sprite = new Sprite( );			breadMask.y = 540;			breadMask.graphics.beginFill( 0x003399, .5 );			breadMask.graphics.drawRect( 0, 0, 900, 25 );			breadMask.graphics.endFill( );						// add in breadcrumb nav holder			bread = new Sprite( );			bread.y = 540;			bread.graphics.beginFill( 0xabd1dc, .5 );			bread.graphics.drawRect( 0, 0, 900, 25 );			bread.graphics.endFill( );			bread.blendMode = BlendMode.LAYER;			bread.mask = breadMask;			bread.alpha = 0;						addChild( bread );						// queue's up a looping call to cycle through the three buttons			//TweenLite.delayedCall( 5, showEmOff );		}				private function masksOn( e:Event ):void		{			//e.target.loader.cacheAsBitmap = true;			//flashy.cacheAsBitmap = true;			flashy.mask = e.target.loader;		}				private function setupFlashbox( ):void		{			// set up the flashbox piece so that we can get the proper xml			var mboxServerURL:String = "http://mbox12.offermatica.com"; 			var mboxClientCode:String = "allstardirectories";			var mboxName:String = "ahs-home-flash-school-xml";						// Create the FlashboxFactory. 			mboxFactory = new FlashboxFactory( mboxServerURL, mboxClientCode, this ); 			  			// Create the Flashbox. 			flashAd = mboxFactory.addFlashbox( mboxName ); 			flashAd.setDefaultContentURL( "http://www.allalliedhealthschools.com" );			flashAd.addOnLoadFunction( loadStatesXML );						// load the content			flashAd.loadContent( );		}				// shows off the buttons again		private function showEmOff( ):void		{			for ( var i in btnArr ) {				TweenLite.to( btns.getChildAt( i ), .25, { scaleX:1.25, scaleY:1.25, tint:0x339966, delay: .125 * i, overwrite:0, ease:"EaseOutCirc" } );				TweenLite.to( btns.getChildAt( i ), .5, { scaleX:1, scaleY:1, removeTint:true, delay:.375 + .125 * i, overwrite:0, ease:"EaseInOutCirc" } ); 			}						// queue's up a looping call to cycle through the three buttons			TweenLite.delayedCall( 10, showEmOff );		}				private function setupPath( str:String ):void		{			// based on the button clicked, go to that section			switch( str ) {				// state				case "1" :					orderArr = new Array( "splash", "where", "focus", "results" );					break;									// program				case "0" :					orderArr = new Array( "splash", "focus", "where", "results" );					break;			}						// set the length so we don't have to query it later			orderArrLen = orderArr.length;						// hide the selector and move on to the next section			//TweenLite.to( splash, .5, { alpha:0, onComplete:makeInvis, onCompleteParams:[ splash ] } );						//gotoNextSection( );		}				public function gotoNextSection( ):void		{			if ( isMoving )				return;						if ( ( currSection < orderArrLen - 1 && ( currSection >= 0 && !jumpBackBool ) ) || ( currSection > 0 && jumpBackBool ) )			{				var orderMatch:uint;				for ( var i in orderArr )				{					if ( orderArr[ i ] == backTo )						orderMatch = i;				}								// increment or decrement to get to the proper section				if ( jumpBackBool )				{					for ( var j:int = bread.numChildren - 1; j>=orderMatch; j-- )					{						if ( j < 0 )							continue;													switch( orderArr[ j ] )						{							case "where" :								theState = "";								break;							case "focus" :								theProgram = "";								break;						}					}										hideCurrent( );					currSection --;										while( orderMatch != currSection )					{						breadX -= bread.getChildAt( bread.numChildren - 1 ).width;						bread.removeChildAt( bread.numChildren - 1 );						currSection --;					}				}				else				{					// hides the current one in a uniform manner					hideCurrent( );					currSection ++;				}								if( bread.numChildren == 0 )					TweenLite.to( bread, .25, { alpha:0 } );								// track it				tracker.trackPageview( "/paid" + orderArr[ currSection ] );								switch( orderArr[ currSection ] ) {					case "splash" :						isMoving = true;						splash.visible = true;						TweenLite.to( splash, .5, { alpha:1, delay:.5 } );						TweenLite.delayedCall( 1.05, doneMoving );						break;											case "where" :						isMoving = true;						var where:PaidWhere = new PaidWhere( this );						where.name = "where";						where.mouseEnabled = false;						addChild( where );						//TweenLite.from( where, .75, { rotationY: -60, alpha: 0, delay:.5, onComplete:where.showStates, onCompleteParams:[ theProgram ] } );						TweenLite.from( where, .75, { alpha: 0, delay:.5, onComplete:where.showStates, onCompleteParams:[ theProgram ] } );						TweenLite.delayedCall( .75, doneMoving );						break;											case "focus" :						isMoving = true;						var focus:PaidFocuses = new PaidFocuses( this, "focus" );						focus.name = "focus";						focus.mouseEnabled = false;						addChild( focus );						//TweenLite.from( focus, .75, { rotationY:-60, alpha:0, delay:.5 } );						TweenLite.from( focus, .75, { alpha:0, delay:.5 } );						TweenLite.delayedCall( .75, doneMoving );						break;											case "results" :						isMoving = true;						var theResults:PaidResults = new PaidResults( this );						theResults.name = "results";						theResults.mouseEnabled = false;						addChild( theResults );						//TweenLite.from( theResults, .75, {rotationY:-60, alpha:0, delay:.5 } );						TweenLite.from( theResults, .75, { alpha:0, delay:.5 } );						TweenLite.delayedCall( .75, doneMoving );						break;				}			}		}				private function hideCurrent( ):void		{			var switchKey:String;						if ( jumpBackBool && currSection > 0 )				switchKey = orderArr[ currSection ];			else				switchKey = orderArr[ currSection ];							switch( switchKey )			{				case "splash" :					addBreadCrumb( "Home", "splash" );										TweenLite.to( getChildByName( "splash" ), .5, { alpha:0, onComplete:makeInvis, onCompleteParams:[ splash ] } );					break;				case "where" :					addBreadCrumb( "State", "where" );											//TweenLite.to( getChildByName( "where" ), .75, { alpha:0, rotationY:70, onComplete:removeIt, onCompleteParams:[ getChildByName( "where" ) ] } );					TweenLite.to( getChildByName( "where" ), .75, { alpha:0, onComplete:removeIt, onCompleteParams:[ getChildByName( "where" ) ] } );										break;				case "focus" :					addBreadCrumb( "Program", "focus" );											//TweenLite.to( getChildByName( "focus" ), .75, { alpha:0, rotationY:70, onComplete:removeIt, onCompleteParams:[ getChildByName( "focus" ) ] } );					TweenLite.to( getChildByName( "focus" ), .75, { alpha:0, onComplete:removeIt, onCompleteParams:[ getChildByName( "focus" ) ] } );										break;				case "results" :					addBreadCrumb( "Schools", "results" );											//TweenLite.to( getChildByName( "results" ), .75, { alpha:0, rotationY:70, onComplete:removeIt, onCompleteParams:[ getChildByName( "results" ) ] } );					TweenLite.to( getChildByName( "results" ), .75, { alpha:0, onComplete:removeIt, onCompleteParams:[ getChildByName( "results" ) ] } );										break;			}						jumpBackBool = false;		}						private function doneMoving( ):void		{			isMoving = false;						if ( splash.alpha == 1 )			{				btns.visible = true;				TweenLite.from( btns, .25, { alpha: 0 } );			}		}						public function addBreadCrumb( str:String, link:String ):void		{			if ( bread.alpha == 0 )				TweenLite.to( bread, .5, { alpha:1 } );						if ( jumpBackBool )			{				breadX -= bread.getChildAt( bread.numChildren - 1 ).width;				bread.removeChild( bread.getChildAt( bread.numChildren - 1 ) )								return;			}						var sp:Sprite = new Sprite( );			sp.name = "bread" + link;			sp.x = breadX;			sp.buttonMode = true;			sp.mouseChildren = false;			sp.blendMode = BlendMode.LAYER;						bread.addChild( sp );						var txt:TextField = new TextField( );			txt.blendMode = BlendMode.ERASE;			txt.antiAliasType = AntiAliasType.ADVANCED;			txt.multiline = false;			txt.wordWrap = false;			txt.selectable = false;			txt.embedFonts = true;			txt.text = str;			txt.setTextFormat( tfBtn );			txt.height = txt.textHeight + 5;			txt.width = txt.textWidth + 10;			txt.y = 3;						sp.addChild( txt );						TweenLite.from( sp, .5, { alpha:0, y:"20", delay:.75 } );						// add in the arrow piece			sp.graphics.lineStyle( 6, 0xffffff, .5 );			sp.graphics.moveTo( txt.width - 15, -23 );			sp.graphics.lineTo( txt.width + 15, 12 );			sp.graphics.lineTo( txt.width - 15, 47 );			sp.graphics.endFill( );						breadX += txt.textWidth + 30;						sp.addEventListener( MouseEvent.ROLL_OVER, over, false, 150, true );			sp.addEventListener( MouseEvent.ROLL_OUT, out, false, 150, true );			sp.addEventListener( MouseEvent.CLICK, jumpBack, false, 150, true );						swapChildren( getChildAt( numChildren - 1 ), bread );		}						// event handlers		private function fadeIn( e:Event ):void		{			TweenLite.from( e.target.loader, .5, { alpha:0, delay:.5 } );		}				private function fadeInFadeOut( e:Event ):void		{			TweenLite.to( e.target.loader, .5, { alpha:.5, delay:.5, overwrite:0 } );			TweenLite.to( e.target.loader, 20, { alpha:0, overwrite:0, delay:2 } );		}				private function makeInvis( sp ):void		{			if ( sp.visible != undefined )				sp.visible = false;						if ( sp == splash )				btns.visible = false;		}				private function removeIt( sp ):void		{			removeChild( sp );		}				private function over( e:MouseEvent ):void		{			var tgt = e.target;						// if it hasn't faded in all the way yet, kill this off			if ( tgt.alpha < 1 || tgt.scaleX > 1 )				return;						TweenLite.to( tgt.getChildAt( 0 ), .5, { alpha:1, tint:0x174c5f } );						// if a button is rolled over, then stop running the showEmOff method			TweenLite.killDelayedCallsTo( showEmOff );		}				private function out( e:MouseEvent ):void		{			var tgt = e.target;						// if it hasn't faded in all the way yet, kill this off			if ( tgt.alpha < 1 || tgt.scaleX > 1 )				return;						TweenLite.to( tgt.getChildAt( 0 ), .75, { alpha:1, removeTint:true } );		}				/*		// used for local testing		private function loadStatesXML( e:Event ):void		{			statesXML = new XML( e.target.data );		}		*/				private function loadStatesXML( xmlResponse:XML ):void		{			statesXML = new XML( xmlResponse );		}						public function clicked( e:MouseEvent ):void		{			setupPath( e.target.name );						gotoNextSection( );		}				public function jumpBack( e:MouseEvent ):void		{			backTo = e.target.name.substr( 5 );						jumpBackBool = true;			gotoNextSection( );		}	}}