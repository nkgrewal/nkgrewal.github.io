package com.asd{	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.geom.Vector3D;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import memorphic.xpath.XPathQuery;	import gs.*;	import gs.easing.*;	import gs.plugins.*;		public class US_Map extends MovieClip	{		public var ak:MovieClip;		public var al:MovieClip;		public var ar:MovieClip;		public var az:MovieClip;		public var ca:MovieClip;		public var co:MovieClip;		public var ct:MovieClip;		public var dc:MovieClip;		public var de:MovieClip;		public var flo:MovieClip;		public var ga:MovieClip;		public var hi:MovieClip;		public var ia:MovieClip;		public var id:MovieClip;		public var il:MovieClip;		public var ind:MovieClip;		public var ks:MovieClip;		public var ky:MovieClip;		public var la:MovieClip;		public var ma:MovieClip;		public var md:MovieClip;		public var me:MovieClip;		public var mi:MovieClip;		public var mn:MovieClip;		public var mo:MovieClip;		public var ms:MovieClip;		public var mt:MovieClip;		public var nc:MovieClip;		public var nd:MovieClip;		public var neb:MovieClip;		public var nh:MovieClip;		public var nj:MovieClip;		public var nm:MovieClip;		public var nv:MovieClip;		public var ny:MovieClip;		public var oh:MovieClip;		public var ok:MovieClip;		public var ore:MovieClip;		public var pa:MovieClip;		public var ri:MovieClip;		public var sc:MovieClip;		public var sd:MovieClip;		public var tn:MovieClip;		public var tx:MovieClip;		public var ut:MovieClip;		public var va:MovieClip;		public var vt:MovieClip;		public var wa:MovieClip;		public var wi:MovieClip;		public var wv:MovieClip;		public var wy:MovieClip;				private var stateArr:Array = new Array( "al", "ak", "az", "ar", "ca", "co", "ct", "dc", "de", "flo", "ga", "hi", "id", "il", "ind", "ia", "ks", "ky", "la", "me", "ma", "md", "mi", "mn", "ms", "mo", "mt", "neb", "nh", "nj", "nm", "ny", "nv", "nc", "nd", "oh", "ok", "ore", "pa", "ri", "sc", "sd", "tn", "tx", "ut", "vt", "va", "wa", "wv", "wi", "wy" );		private var stateNameArr:Array = new Array( "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "District of Columbia", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Massachusetts", "Maryland", "Michigan", "Mississippi", "Missouri", "Montana", "Nebraska", "New Hampshire", "New Jersey", "New Mexico", "New York", "Nevada", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming" ); 		private var statesXML:XML = new XML( );		private var statesLoader:URLLoader = new URLLoader( );		private var par;		private var stateList:XMLList;				public function US_Map( p )		{			// activate TweenLite			TweenPlugin.activate([EndArrayPlugin, DropShadowFilterPlugin, VolumePlugin, TintPlugin, FramePlugin, AutoAlphaPlugin, RemoveTintPlugin, VisiblePlugin]);						// set up the parent			par = p;						var tf2 = new TextFormat( );			tf2.font = "Helvetica";			tf2.color = "0x003366";			tf2.size = 50;			tf2.bold = true;						var fCopy:TextField = new TextField( );			fCopy.width = 650;			fCopy.height = 300;			fCopy.x = -55;			fCopy.y = -165;			fCopy.z = -170;			fCopy.rotationY = -30;			fCopy.multiline = true;			fCopy.wordWrap = true;			fCopy.antiAliasType = AntiAliasType.ADVANCED;			fCopy.selectable = false;			fCopy.embedFonts = true			fCopy.text = "Where do you want to go to school?";			fCopy.setTextFormat( tf2 );			addChild( fCopy );						for ( var i in stateArr )			{				var mc:MovieClip = this[ stateArr[ i ] ];				mc.alpha = .25;				mc.addEventListener( MouseEvent.ROLL_OVER, overState );				mc.addEventListener( MouseEvent.ROLL_OUT, outState );				mc.addEventListener( MouseEvent.CLICK, clickState );				addChild( mc );			}						// set up listeners			statesLoader.addEventListener( Event.COMPLETE, loadStatesXML );						statesLoader.load( new URLRequest( "schoolKey.xml" ) );					}				function loadStatesXML(e:Event):void		{			statesXML = new XML(e.target.data);		}				public function showStates( str:String ):void		{			var q:XPathQuery;			// if nothing is passed in, show all states			if ( str == "_" )				q = new XPathQuery( "//school/@state" );			else				q = new XPathQuery( "//key[@id='" + str + "']/../@state" );						stateList = q.exec( statesXML );						for ( var i in stateArr )			{				var tmp:MovieClip = this[ stateArr[ i ] ];				setChildIndex( tmp, i );				TweenLite.to( tmp, .5, { alpha:.25, z:0, removeTint:true } );			}						for ( i in stateList )			{				var tmp2:MovieClip = this[ stateList[ i ] ];				setChildIndex( tmp2, stateArr.length - 1 );				TweenLite.to( tmp2, 1, { alpha:.8, z:-20, delay:.5, removeTint:true, overWrite:0 } );			}		}				private function overState( e:MouseEvent ):void		{			var tgt = e.target;						if ( tgt.alpha < .7 )				return;							setChildIndex ( tgt, stateArr.length - 1 );						for ( var i=0; i<tgt.numChildren; i++ )			{				if ( tgt.getChildAt( i ).toString( ).indexOf( "Shape" ) > 0 )					TweenLite.to( tgt.getChildAt( i ), .25, { tint:0x339966 } );			}						TweenLite.to( tgt, .25, { z:-30, dropShadowFilter:{ color:0x000000, blurX:20, blurY:20, alpha:1, distance:5 } } );		}				private function outState( e:MouseEvent ):void		{			var tgt = e.target;			if ( tgt.alpha < .7 )				return;			for ( var i=0; i<tgt.numChildren; i++ )			{				if ( tgt.getChildAt( i ).toString( ).indexOf( "Shape" ) > 0 )					TweenLite.to( tgt.getChildAt( i ), .25, { removeTint:true } );			}						setChildIndex ( tgt, stateArr.length - 1 );							TweenLite.to( tgt, .5, { z:-20, dropShadowFilter:{ alpha:0 } } );		}				private function clickState( e:MouseEvent ):void		{			// set up the state keys so that if the states are picked first, the programs can show properly			par.theState = e.target.name;						var q:XPathQuery = new XPathQuery( "//school[@state='" + par.theState + "']/key" );			par.stateKeys = q.exec( statesXML );						par.gotoNextSection( );		}				public function returnResults( ):XMLList		{			var q:XPathQuery = new XPathQuery( "//key[@id='" + par.theProgram + "_" + par.theDegree + "']/.." );			return q.exec( statesXML );		}	}}