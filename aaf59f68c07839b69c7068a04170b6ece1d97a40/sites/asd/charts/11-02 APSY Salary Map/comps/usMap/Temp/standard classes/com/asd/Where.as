package com.asd{	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.Stage;	import flash.display.BlendMode;	import flash.filters.DropShadowFilter;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import flash.utils.getDefinitionByName;	import flash.net.navigateToURL;	import memorphic.xpath.XPathQuery;	import com.utility.vScroll3;	import com.asd.US_Map;	import gs.*;	import gs.easing.*;	import gs.plugins.*;		public class Where extends Sprite	{		private var tf:TextFormat;		private var tf2:TextFormat;		private var optionsTF:TextFormat;		private var bonusTF:TextFormat;		private var stateArr:Array = new Array( "online", "al", "ak", "az", "ar", "ca", "co", "ct", "dc", "de", "flo", "ga", "hi", "id", "il", "ind", "ia", "ks", "ky", "la", "me", "ma", "md", "mi", "mn", "ms", "mo", "mt", "neb", "nh", "nj", "nm", "ny", "nv", "nc", "nd", "oh", "ok", "ore", "pa", "ri", "sc", "sd", "tn", "tx", "ut", "vt", "va", "wa", "wv", "wi", "wy" );		private var stateNameArr:Array = new Array( "Online", "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "District of Columbia", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Massachusetts", "Maryland", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "New Hampshire", "New Jersey", "New Mexico", "New York", "Nevada", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming" );		private var addedArr:Array;		private var len:uint = stateArr.length;		private var par;		private var stateList:XMLList;		private var listBool:Boolean = true;		private var startNumChildren:uint;		private var showStateStr:String;		private var ds:DropShadowFilter;		private var optMask:Sprite;		private var isMoving:Boolean = true;				public function Where( p )		{			// activate TweenLite			TweenPlugin.activate([EndArrayPlugin, DropShadowFilterPlugin, VolumePlugin, TintPlugin, FramePlugin, AutoAlphaPlugin, RemoveTintPlugin, VisiblePlugin]);						// inner shadow			ds = new DropShadowFilter( );			ds.inner = true;			ds.quality = 3;			ds.blurX = 10;			ds.blurY = 20;						// set up the parent			par = p;						// text formatter			tf = new TextFormat( );			tf.font = "Helvetica";			tf.color = "0xffffff";			tf.align = "center";			tf.bold = true;			tf.size = 14;						tf2 = new TextFormat( );			tf2.font = "Helvetica";			tf2.color = "0x003366";			tf2.size = 28;			tf2.bold = true;						optionsTF = new TextFormat( );			optionsTF.font = "Helvetica";			optionsTF.color = "0x003366";			optionsTF.size = 16;						bonusTF = new TextFormat( );			bonusTF.font = "Helvetica";			bonusTF.color = "0xff6500";			bonusTF.align = "center";			bonusTF.bold = true;			bonusTF.size = 18;						var fCopy:TextField = new TextField( );			fCopy.width = 320;			xy(fCopy, 10, 20);			fCopy.multiline = true;			fCopy.wordWrap = true;			fCopy.antiAliasType = AntiAliasType.ADVANCED;			fCopy.selectable = false;			fCopy.embedFonts = true			fCopy.text = "Where would you like to go to school?";			fCopy.setTextFormat( tf2 );			fCopy.height = fCopy.textHeight + 5;			addChild( fCopy );						// options mask			optMask = new Sprite( );			optMask.graphics.beginFill( 0x348911 );			optMask.graphics.drawRoundRect( 330, 25, 120, 50, 8, 8 );			optMask.graphics.endFill( );			//addChild( optMask );						startNumChildren = numChildren;						// add in the top buttons			addTopButtons( );		}				private function addTopButtons( ):void		{			// set up bar of options			var options:Sprite = new Sprite( );			options.name = randomName( "options" );			//options.scaleX = .8;			//options.scaleY = .8;			options.addEventListener( MouseEvent.CLICK, switchView );			options.buttonMode = true;			options.mouseChildren = false;			options.blendMode = BlendMode.LAYER;			xy(options, 330, 25 );			addChild( options );						var bg:Sprite = new Sprite( );			bg.name = randomName( "bg" );			bg.graphics.beginFill( 0x666666 );			bg.graphics.drawRoundRect( 0, 0, 96, 40, 8, 8 );			bg.graphics.endFill( );			bg.filters = [ ds ];			options.addChild( bg );						//options.mask = optMask;						// add the list view			var listView:Sprite = new Sprite( );			listView.name = randomName( "listView" );			options.addChild( listView );						var lvBG:Sprite = new Sprite( );			lvBG.name = randomName( "lvBG" );			lvBG.graphics.beginFill( 0xcccccc );			lvBG.graphics.drawRect( 0, 0, 48, 40 );			lvBG.graphics.endFill( );			listView.addChild( lvBG );						var miniLines:MovieClip = addMovieFromLibrary( "miniLines", listView );			miniLines.name = randomName( "miniLines" );			xy( miniLines, 8, 8 );						// map			var mapView:Sprite = new Sprite( );			mapView.name = randomName( "mapView" );			xy( mapView, 48, 0 );			options.addChild( mapView );						var mvBG:Sprite = new Sprite( );			mvBG.name = randomName( "mvBG" );			mvBG.graphics.beginFill( 0xcccccc );			mvBG.graphics.drawRect( 0, 0, 48, 40 );			mvBG.graphics.endFill( );			mapView.addChild( mvBG );						var miniMap:MovieClip = addMovieFromLibrary( "miniMap", mapView );			miniMap.name = randomName( "miniMap" );			xy( miniMap, 5, 8 );						if ( listBool )			{				lvBG.blendMode = BlendMode.DARKEN;				miniLines.blendMode = BlendMode.ERASE;				mvBG.blendMode = BlendMode.INVERT;			}			else			{				lvBG.blendMode = BlendMode.INVERT;				mvBG.blendMode = BlendMode.DARKEN;				miniMap.blendMode = BlendMode.ERASE;			}						// add in the text under the buttons			var optionsTxt:TextField = new TextField( );			optionsTxt.width = 120;			optionsTxt.text = "List    Map";			optionsTxt.setTextFormat( optionsTF );			optionsTxt.antiAliasType = AntiAliasType.ADVANCED;			optionsTxt.embedFonts = true;			optionsTxt.selectable = false;			optionsTxt.height = optionsTxt.textHeight + 2;			xy( optionsTxt, 338, 70 );						addChild( optionsTxt );		}				public function showStates( str:String ):void		{			// set the showStateStr so that we can call this method again.			showStateStr = str;						var q:XPathQuery;			// if nothing is passed in, show all states			q = new XPathQuery( "//school" );						stateList = q.exec( par.statesXML );						addedArr = new Array( );			var yPos:uint = 0;						var scrollMask:Sprite = new Sprite( );			scrollMask.graphics.beginFill( 0xffffff );			scrollMask.graphics.drawRect(10, 100, 410, 189 );			scrollMask.graphics.endFill( );			addChild( scrollMask );						var scrollMC:Sprite = new Sprite( );			scrollMC.x = 10;			scrollMC.y = 100;			scrollMC.mask = scrollMask;			addChild( scrollMC );						// make the list of all of the schools we can click on			for ( var i in stateList )			{				var found:Boolean = false;				var programMatch:Boolean = false;								for ( var j=0; j<stateList[ i ].children( ).length( ); j++ )				{					if ( stateList[ i ].children( )[ j ] == str || str == "" )						programMatch = true;				}								// if the program doesn't match, then skip to the next school				if ( !programMatch )					continue;								// check to see if it's added				for ( var j in addedArr )				{					if ( stateList[ i ] == addedArr[ j ] )						found = true;				}								if ( found != true )				{					var pos:uint;										// add it to the list					addedArr.push( stateList[ i ].attribute( "state" ) );				}			}						var addedLen:uint = addedArr.length;						// loop through and add in all of the states in alphabetical order			for ( i in stateNameArr )			{				var matched:Boolean = false;								// find it's spot in the stateArr				for ( var k:uint = 0; k<addedLen; k++ )				{					if ( addedArr[ k ] == stateArr[ i ] )					{						matched = true;					}				}								if ( !matched )					continue;								var sp:Sprite = new Sprite( );				sp.name = "sp" + stateArr[ i ];				sp.graphics.beginFill( 0x336699, .8 );				sp.graphics.lineStyle( 6, 0xffffff, .5 );				sp.graphics.drawRoundRect(0, 0, 400, 30, 10, 10 );				sp.graphics.endFill( );				sp.y = yPos;				sp.alpha = 1;				sp.mouseChildren = false;				sp.buttonMode = true;				sp.blendMode = BlendMode.LAYER;								sp.addEventListener( MouseEvent.MOUSE_OVER, over, false, 0, true );				sp.addEventListener( MouseEvent.MOUSE_OUT, out, false, 0, true );				sp.addEventListener( MouseEvent.CLICK, clickFocus, false, 0, true );								var txt:TextField = new TextField( );				//txt.name = "txt";				txt.width = 400;				txt.antiAliasType = AntiAliasType.ADVANCED;				txt.text = stateNameArr[ i ];				txt.multiline = false;				txt.wordWrap = false;				txt.selectable = false;				txt.embedFonts = true;				txt.blendMode = BlendMode.ERASE;				txt.setTextFormat( tf );				txt.height = txt.textHeight + 5;				txt.y = 7;								sp.addChild( txt );								scrollMC.addChild( sp );							yPos += 35;			}						// add in the "Can't find what you're looking for?" text			var bonusTxt:TextField = new TextField( );			bonusTxt.width = 400;			bonusTxt.antiAliasType = AntiAliasType.ADVANCED;			bonusTxt.text = "Can't find the state you're looking for?\nClick here to see ALL options.";			bonusTxt.setTextFormat( bonusTF );			bonusTxt.multiline = true;			bonusTxt.wordWrap = true;			bonusTxt.selectable = false;			bonusTxt.embedFonts = true;			bonusTxt.height = bonusTxt.textHeight + 15;			bonusTxt.y = yPos + 7;			scrollMC.addChild( bonusTxt );						bonusTxt.addEventListener( MouseEvent.ROLL_OVER, mOver );			bonusTxt.addEventListener( MouseEvent.ROLL_OUT, mOut );			bonusTxt.addEventListener( MouseEvent.CLICK, gotoAll );						// add in the scroll bar			var scroller:vScroll3 = new vScroll3( );			scroller.kickIt({tgt:scrollMC, startHeight:189, tgtBaseY:100, hh:0x336699, gc:0xcccccc});			xy(scroller, scrollMC.x + scrollMC.width, scrollMC.y);			addChild( scroller );						//TweenLite.from( scroller, .5, { alpha:0, delay:.5 } );			TweenLite.from( scrollMC, .5, { alpha:0, delay:.25, onComplete:stopMoving } );		}				private function stopMoving( ):void		{			isMoving = false;		}				private function over( e:MouseEvent ):void		{			var tgt = e.target;			if ( tgt.name.indexOf( "sp" ) < 0 )				tgt = tgt.parent;						TweenLite.to( tgt, .5, { alpha:1, tint:0x339966 } );		}				private function out( e:MouseEvent ):void		{			var tgt = e.target;						if ( tgt.name.indexOf( "sp" ) < 0 )				tgt = tgt.parent;						TweenLite.to( tgt, .75, { alpha:1, removeTint:true } );		}				private function mOver( e:MouseEvent ):void		{			var tgt = e.target;			TweenLite.to( tgt, .5, { alpha:1, tint:0x339966 } );		}				private function mOut( e:MouseEvent ):void		{			var tgt = e.target;			TweenLite.to( tgt, .75, { alpha:1, removeTint:true } );		}				private function clickFocus( e:MouseEvent ):void		{			var tgt = e.target;						if ( tgt.name.indexOf( "sp" ) < 0 )				tgt = tgt.parent;							// set up the state keys so that if the states are picked first, the programs can show properly			par.theState = tgt.name.substr( 2 );						var q:XPathQuery = new XPathQuery( "//school[@state='" + par.theState + "']" );			par.stateKeys = q.exec( par.statesXML );						//trace( "stateKeys: \n" + par.stateKeys.toString( ) );						par.gotoNextSection( );		}				private function gotoAll( e:MouseEvent ):void		{			var url:String = "http://www.allalliedhealthschools.com/featured";			navigateToURL( new URLRequest( url ), "_self" );		}				private function switchView( e:MouseEvent ):void		{			if ( isMoving )				return;							if ( listBool && e.target.mouseX > 48 )			{				// clean everything out				cleanIt( );								par.tracker.trackPageview( "/usMap" );								// show the map				var usMap:US_Map = new US_Map( par, stateArr, par.statesXML, addedArr );				usMap.name = randomName( "usMap" );				usMap.y = 115;				usMap.x = 115;				usMap.scaleX = .6;				usMap.scaleY = .6;				//usMap.rotationY = 30				//usMap.z = 350;				addChild( usMap );								//usMap.getChildByName( "online" ).rotationY = -30;				usMap.getChildByName( "online" ).scaleX = .8;				usMap.getChildByName( "online" ).scaleY = .8;												usMap.showStates( );								listBool = false;								addTopButtons( );			}			else if ( !listBool && e.target.mouseX < 48 )			{				// clean everything out				cleanIt( );								par.tracker.trackPageview( "/usList" );								// show the list				showStates( showStateStr );								listBool = true;								addTopButtons( );			}		}						private function xy( tgt, xPos:int, yPos:int ):void		{			tgt.x = xPos;			tgt.y = yPos;		}						public function addMovieFromLibrary( mcIName:String, p:Sprite ):MovieClip		{			var tMC:Class = getDefinitionByName( mcIName ) as Class;			var newMC:MovieClip = new tMC( ) as MovieClip;			p.addChild( newMC );						return newMC;		}				public function cleanIt( ):void		{			// delete out everything with the exception of the starting elements so we have a clean stage to add another card			while( numChildren > startNumChildren )			{				removeChildAt( startNumChildren );			}		}				public function randomName( str:String ):String		{			var i:uint = Math.floor( Math.random( ) * 8000000000 / Math.random( ) );			return ( str + i );		}	}}